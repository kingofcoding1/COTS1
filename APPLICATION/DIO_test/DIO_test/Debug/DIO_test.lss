
DIO_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000386  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003b5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b5a  00000000  00000000  00000413  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a8  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ca  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a0  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000304  00000304  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_SETPINDIRECTION 000000f4  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_SETPINVALUE 000000f4  00000160  00000160  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_GETPINVALUE 00000062  00000254  00000254  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000038  000002b6  000002b6  0000032a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000030c  0000030c  00000380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000030e  0000030e  00000382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000310  00000310  00000384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000002ee  000002ee  00000362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000308  00000308  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
   8:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
   c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  10:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  14:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  18:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  1c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  20:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  24:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  28:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  2c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  30:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  34:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  38:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  3c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  40:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  44:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  48:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  4c:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>
  50:	0c 94 82 01 	jmp	0x304	; 0x304 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  64:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000304 <__bad_interrupt>:
 304:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_SETPINDIRECTION:

0000006c <DIO_SETPINDIRECTION>:



void DIO_SETPINDIRECTION(u8 Port, u8 Pin ,u8 Value)
{
switch (Port)
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	31 f1       	breq	.+76     	; 0xbc <DIO_SETPINDIRECTION+0x50>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_SETPINDIRECTION+0xc>
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_SETPINDIRECTION+0x18>
  76:	08 95       	ret
  78:	83 30       	cpi	r24, 0x03	; 3
  7a:	e1 f1       	breq	.+120    	; 0xf4 <DIO_SETPINDIRECTION+0x88>
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_SETPINDIRECTION+0x16>
  80:	54 c0       	rjmp	.+168    	; 0x12a <DIO_SETPINDIRECTION+0xbe>
  82:	08 95       	ret
{
case PORTA:
switch(Value){
  84:	44 23       	and	r20, r20
  86:	71 f0       	breq	.+28     	; 0xa4 <DIO_SETPINDIRECTION+0x38>
  88:	41 30       	cpi	r20, 0x01	; 1
  8a:	09 f0       	breq	.+2      	; 0x8e <DIO_SETPINDIRECTION+0x22>
  8c:	68 c0       	rjmp	.+208    	; 0x15e <DIO_SETPINDIRECTION+0xf2>
	case DIO_OUTPUT : SET_BIT(DDRA_reg,Pin); break;
  8e:	2a b3       	in	r18, 0x1a	; 26
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <DIO_SETPINDIRECTION+0x2e>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <DIO_SETPINDIRECTION+0x2a>
  9e:	82 2b       	or	r24, r18
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret
	case DIO_INPUT : CLEAR_BIT(DDRA_reg,Pin); break;
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_SETPINDIRECTION+0x44>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_SETPINDIRECTION+0x40>
  b4:	80 95       	com	r24
  b6:	82 23       	and	r24, r18
  b8:	8a bb       	out	0x1a, r24	; 26
  ba:	08 95       	ret
}
break;
case PORTB:
switch(Value){
  bc:	44 23       	and	r20, r20
  be:	71 f0       	breq	.+28     	; 0xdc <DIO_SETPINDIRECTION+0x70>
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	09 f0       	breq	.+2      	; 0xc6 <DIO_SETPINDIRECTION+0x5a>
  c4:	4c c0       	rjmp	.+152    	; 0x15e <DIO_SETPINDIRECTION+0xf2>
	case DIO_OUTPUT : SET_BIT(DDRB_reg,Pin); break;
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SETPINDIRECTION+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SETPINDIRECTION+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
	case DIO_INPUT : CLEAR_BIT(DDRB_reg,Pin); break;
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SETPINDIRECTION+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SETPINDIRECTION+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
}
break;
case PORTC:
switch(Value){
  f4:	44 23       	and	r20, r20
  f6:	69 f0       	breq	.+26     	; 0x112 <DIO_SETPINDIRECTION+0xa6>
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	89 f5       	brne	.+98     	; 0x15e <DIO_SETPINDIRECTION+0xf2>
	case DIO_OUTPUT : SET_BIT(DDRC_reg,Pin); break;
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SETPINDIRECTION+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SETPINDIRECTION+0x98>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
	case DIO_INPUT : CLEAR_BIT(DDRC_reg,Pin); break;
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SETPINDIRECTION+0xb2>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SETPINDIRECTION+0xae>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	84 bb       	out	0x14, r24	; 20
 128:	08 95       	ret
}
break;
case PORTD:
switch(Value){
 12a:	44 23       	and	r20, r20
 12c:	69 f0       	breq	.+26     	; 0x148 <DIO_SETPINDIRECTION+0xdc>
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	b1 f4       	brne	.+44     	; 0x15e <DIO_SETPINDIRECTION+0xf2>
	case DIO_OUTPUT : SET_BIT(DDRD_reg,Pin); break;
 132:	21 b3       	in	r18, 0x11	; 17
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SETPINDIRECTION+0xd2>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SETPINDIRECTION+0xce>
 142:	82 2b       	or	r24, r18
 144:	81 bb       	out	0x11, r24	; 17
 146:	08 95       	ret
	case DIO_INPUT : CLEAR_BIT(DDRD_reg,Pin); break;
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SETPINDIRECTION+0xe8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SETPINDIRECTION+0xe4>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	81 bb       	out	0x11, r24	; 17
 15e:	08 95       	ret

Disassembly of section .text.DIO_SETPINVALUE:

00000160 <DIO_SETPINVALUE>:

}

 void DIO_SETPINVALUE(u8 Port, u8 Pin ,u8 Value)
 {
	 switch (Port)
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	31 f1       	breq	.+76     	; 0x1b0 <DIO_SETPINVALUE+0x50>
 164:	18 f4       	brcc	.+6      	; 0x16c <DIO_SETPINVALUE+0xc>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	39 f0       	breq	.+14     	; 0x178 <DIO_SETPINVALUE+0x18>
 16a:	08 95       	ret
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	e1 f1       	breq	.+120    	; 0x1e8 <DIO_SETPINVALUE+0x88>
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	09 f4       	brne	.+2      	; 0x176 <DIO_SETPINVALUE+0x16>
 174:	54 c0       	rjmp	.+168    	; 0x21e <DIO_SETPINVALUE+0xbe>
 176:	08 95       	ret
	 {
		 
		 case PORTA:
		 switch(Value){
 178:	44 23       	and	r20, r20
 17a:	71 f0       	breq	.+28     	; 0x198 <DIO_SETPINVALUE+0x38>
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	09 f0       	breq	.+2      	; 0x182 <DIO_SETPINVALUE+0x22>
 180:	68 c0       	rjmp	.+208    	; 0x252 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT : SET_BIT(PORTA_reg,Pin); break;
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SETPINVALUE+0x2e>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SETPINVALUE+0x2a>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTA_reg,Pin); break;
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SETPINVALUE+0x44>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SETPINVALUE+0x40>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
		 }
		 break;
		 case PORTB:
		 switch(Value){
 1b0:	44 23       	and	r20, r20
 1b2:	71 f0       	breq	.+28     	; 0x1d0 <DIO_SETPINVALUE+0x70>
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <DIO_SETPINVALUE+0x5a>
 1b8:	4c c0       	rjmp	.+152    	; 0x252 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT : SET_BIT(PORTB_reg,Pin); break;
 1ba:	28 b3       	in	r18, 0x18	; 24
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SETPINVALUE+0x66>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SETPINVALUE+0x62>
 1ca:	82 2b       	or	r24, r18
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTB_reg,Pin); break;
 1d0:	28 b3       	in	r18, 0x18	; 24
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SETPINVALUE+0x7c>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SETPINVALUE+0x78>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
		 }
		 break;
		 case PORTC:
		 switch(Value){
 1e8:	44 23       	and	r20, r20
 1ea:	69 f0       	breq	.+26     	; 0x206 <DIO_SETPINVALUE+0xa6>
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	89 f5       	brne	.+98     	; 0x252 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT :  SET_BIT(PORTC_reg,Pin); break;
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_SETPINVALUE+0x9c>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_SETPINVALUE+0x98>
 200:	82 2b       	or	r24, r18
 202:	85 bb       	out	0x15, r24	; 21
 204:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTC_reg,Pin); break;
 206:	25 b3       	in	r18, 0x15	; 21
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_SETPINVALUE+0xb2>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_SETPINVALUE+0xae>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	85 bb       	out	0x15, r24	; 21
 21c:	08 95       	ret
		 }
		 break;
		 case PORTD:
		 switch(Value){
 21e:	44 23       	and	r20, r20
 220:	69 f0       	breq	.+26     	; 0x23c <DIO_SETPINVALUE+0xdc>
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	b1 f4       	brne	.+44     	; 0x252 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT :  SET_BIT(PORTD_reg,Pin); break;
 226:	22 b3       	in	r18, 0x12	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SETPINVALUE+0xd2>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SETPINVALUE+0xce>
 236:	82 2b       	or	r24, r18
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTD_reg,Pin); break;
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SETPINVALUE+0xe8>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SETPINVALUE+0xe4>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

Disassembly of section .text.DIO_GETPINVALUE:

00000254 <DIO_GETPINVALUE>:
 
 
 u8 DIO_GETPINVALUE(u8 Port, u8 Pin)
 {
 	u8 Temp = 0;
 	switch(Port)
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	91 f0       	breq	.+36     	; 0x27c <DIO_GETPINVALUE+0x28>
 258:	18 f4       	brcc	.+6      	; 0x260 <DIO_GETPINVALUE+0xc>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	31 f0       	breq	.+12     	; 0x26a <DIO_GETPINVALUE+0x16>
 25e:	29 c0       	rjmp	.+82     	; 0x2b2 <DIO_GETPINVALUE+0x5e>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	a9 f0       	breq	.+42     	; 0x28e <DIO_GETPINVALUE+0x3a>
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	e1 f0       	breq	.+56     	; 0x2a0 <DIO_GETPINVALUE+0x4c>
 268:	24 c0       	rjmp	.+72     	; 0x2b2 <DIO_GETPINVALUE+0x5e>
    {
 	   case PORTA: Temp = GET_BIT(PINA_reg,Pin); break;
 26a:	89 b3       	in	r24, 0x19	; 25
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_GETPINVALUE+0x20>
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_GETPINVALUE+0x1c>
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	08 95       	ret
 	   case PORTB: Temp = GET_BIT(PINB_reg,Pin); break;
 27c:	86 b3       	in	r24, 0x16	; 22
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_GETPINVALUE+0x32>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_GETPINVALUE+0x2e>
 28a:	81 70       	andi	r24, 0x01	; 1
 28c:	08 95       	ret
 	   case PORTC: Temp = GET_BIT(PINC_reg,Pin); break;
 28e:	83 b3       	in	r24, 0x13	; 19
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_GETPINVALUE+0x44>
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_GETPINVALUE+0x40>
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	08 95       	ret
 	   case PORTD: Temp = GET_BIT(PIND_reg,Pin); break;
 2a0:	80 b3       	in	r24, 0x10	; 16
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_GETPINVALUE+0x56>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_GETPINVALUE+0x52>
 2ae:	81 70       	andi	r24, 0x01	; 1
 2b0:	08 95       	ret
 }
 
 
 u8 DIO_GETPINVALUE(u8 Port, u8 Pin)
 {
 	u8 Temp = 0;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 
 return Temp;
 
 
 
 2b4:	08 95       	ret

Disassembly of section .text.main:

000002b6 <main>:
#include "std_types.h"
#include "DIO_INTERFACE.h"
#include "DIO_PRIVATE.h"
int main(void)
{   
       DIO_SETPINDIRECTION(PORTC,PIN_2,DIO_OUTPUT);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	62 e0       	ldi	r22, 0x02	; 2
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
       DIO_SETPINDIRECTION(PORTB,PIN_2,DIO_INPUT);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>

    while(1)
    {
         if (DIO_GETPINVALUE(PORTB,PIN_0) == 0)
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_GETPINVALUE>
 2d2:	81 11       	cpse	r24, r1
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <main+0x2c>
         {
	         DIO_SETPINVALUE(PORTC,PIN_2,DIO_HIGH);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_SETPINVALUE>
 2e0:	f4 cf       	rjmp	.-24     	; 0x2ca <main+0x14>
	         
         }
         else  {	 DIO_SETPINVALUE(PORTC,PIN_2,DIO_LOW); }
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_SETPINVALUE>
 2ec:	ee cf       	rjmp	.-36     	; 0x2ca <main+0x14>

Disassembly of section .text.__dummy_fini:

0000030c <_fini>:
 30c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000030e <__funcs_on_exit>:
 30e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000310 <__simulator_exit>:
 310:	08 95       	ret

Disassembly of section .text.exit:

000002ee <exit>:
 2ee:	ec 01       	movw	r28, r24
 2f0:	0e 94 87 01 	call	0x30e	; 0x30e <__funcs_on_exit>
 2f4:	0e 94 86 01 	call	0x30c	; 0x30c <_fini>
 2f8:	ce 01       	movw	r24, r28
 2fa:	0e 94 88 01 	call	0x310	; 0x310 <__simulator_exit>
 2fe:	ce 01       	movw	r24, r28
 300:	0e 94 84 01 	call	0x308	; 0x308 <_Exit>

Disassembly of section .text._Exit:

00000308 <_Exit>:
 308:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
