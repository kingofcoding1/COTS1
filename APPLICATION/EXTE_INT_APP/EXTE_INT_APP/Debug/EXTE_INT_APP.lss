
EXTE_INT_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000225  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000233  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa4  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e0  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023c  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001aa  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  000017b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000154  00000154  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.EXTI_INIT 0000001a  000000fc  000000fc  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Call_Back 0000000a  00000140  00000140  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 0000004e  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.gptr     00000002  00800060  00800060  000001f6  2**0
                  ALLOC
 18 .text.toggle  0000000a  0000014a  0000014a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000014  0000012c  0000012c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  0000015c  0000015c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  0000015e  0000015e  000001f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  00000160  00000160  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000116  00000116  000001aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  00000158  00000158  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <_etext>
   8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  a6:	0c 94 8b 00 	jmp	0x116	; 0x116 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000154 <__bad_interrupt>:
 154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.EXTI_INIT:

000000fc <EXTI_INIT>:
#elif MODE == ANY_LOGICAL
SET_BIT(EXTI_MCUCR,0);
CLEAR_BIT(EXTI_MCUCR,1);

#elif MODE == FALLING_EDGE
SET_BIT(EXTI_MCUCR,1);
  fc:	85 b7       	in	r24, 0x35	; 53
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	85 bf       	out	0x35, r24	; 53
CLEAR_BIT(EXTI_MCUCR,0);
 102:	85 b7       	in	r24, 0x35	; 53
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	85 bf       	out	0x35, r24	; 53
#elif MODE == RISING_EDGE
SET_BIT(EXTI_MCUCR,0);
SET_BIT(EXTI_MCUCR,1);
#endif

SET_BIT(EXTI_GICR,6);
 108:	8b b7       	in	r24, 0x3b	; 59
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	8b bf       	out	0x3b, r24	; 59
SET_BIT(EXTI_SREG,7);
 10e:	8f b7       	in	r24, 0x3f	; 63
 110:	80 68       	ori	r24, 0x80	; 128
 112:	8f bf       	out	0x3f, r24	; 63
 114:	08 95       	ret

Disassembly of section .text.Call_Back:

00000140 <Call_Back>:
}


void Call_Back(void (*ptr) (void))
{
	gptr = ptr;
 140:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 148:	08 95       	ret

Disassembly of section .text.__vector_1:

000000ae <__vector_1>:
	
}

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	gptr();
  d0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
  d4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
  d8:	09 95       	icall
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

Disassembly of section .text.toggle:

0000014a <toggle>:
#include "std_types.h"
#include "DIO_INTERFACE.h"
#include "EXTERN_INT_INTER.h"
#include "DIO_PRIVATE.h"
void toggle(){
	Toggle_BIT(PORTD_reg,3);
 14a:	92 b3       	in	r25, 0x12	; 18
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	89 27       	eor	r24, r25
 150:	82 bb       	out	0x12, r24	; 18
 152:	08 95       	ret

Disassembly of section .text.main:

0000012c <main>:
}

int main(void)
{
	SET_BIT(DDRD_reg,3);
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	81 bb       	out	0x11, r24	; 17
	EXTI_INIT();
 132:	0e 94 7e 00 	call	0xfc	; 0xfc <EXTI_INIT>
	Call_Back(toggle);
 136:	85 ea       	ldi	r24, 0xA5	; 165
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 a0 00 	call	0x140	; 0x140 <Call_Back>
 13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0x12>

Disassembly of section .text.__dummy_fini:

0000015c <_fini>:
 15c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000015e <__funcs_on_exit>:
 15e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000160 <__simulator_exit>:
 160:	08 95       	ret

Disassembly of section .text.exit:

00000116 <exit>:
 116:	ec 01       	movw	r28, r24
 118:	0e 94 af 00 	call	0x15e	; 0x15e <__funcs_on_exit>
 11c:	0e 94 ae 00 	call	0x15c	; 0x15c <_fini>
 120:	ce 01       	movw	r24, r28
 122:	0e 94 b0 00 	call	0x160	; 0x160 <__simulator_exit>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 ac 00 	call	0x158	; 0x158 <_Exit>

Disassembly of section .text._Exit:

00000158 <_Exit>:
 158:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
