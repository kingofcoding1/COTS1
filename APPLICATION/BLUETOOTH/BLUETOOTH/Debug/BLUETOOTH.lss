
BLUETOOTH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7a  00000000  00000000  000001d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b2  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024e  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ad  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000024  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_Recieve 00000008  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_INIT 0000001c  00000090  00000090  00000104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000ac  000000ac  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#include "USART_CONFG.h"


int main()
{
   SET_BIT(	DDRD_reg,3);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	81 bb       	out	0x11, r24	; 17
   UART_INIT();
  72:	0e 94 48 00 	call	0x90	; 0x90 <UART_INIT>
   u8 Rec_data = 0;
    while(1)
    {
		Rec_data = UART_Recieve();
  76:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_Recieve>
		
		if (Rec_data == 1)
  7a:	81 30       	cpi	r24, 0x01	; 1
  7c:	19 f4       	brne	.+6      	; 0x84 <main+0x18>
		{
		SET_BIT(PORTD_reg,3);		
  7e:	92 b3       	in	r25, 0x12	; 18
  80:	98 60       	ori	r25, 0x08	; 8
  82:	92 bb       	out	0x12, r25	; 18
		}
		if (Rec_data == 2)
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b9 f7       	brne	.-18     	; 0x76 <main+0xa>
		{
		CLEAR_BIT(PORTD_reg,3);
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	87 7f       	andi	r24, 0xF7	; 247
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	f3 cf       	rjmp	.-26     	; 0x76 <main+0xa>

Disassembly of section .text.UART_Recieve:

000000c2 <UART_Recieve>:
}

u8 UART_Recieve(void)
{
	
	while(GET_BIT(UART_UCSRA,7)==0);	
  c2:	5f 9b       	sbis	0x0b, 7	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <UART_Recieve>
	return UART_UDR;
  c6:	8c b1       	in	r24, 0x0c	; 12
	

}
  c8:	08 95       	ret

Disassembly of section .text.UART_INIT:

00000090 <UART_INIT>:

void UART_Transmit(u8 Data)
{
	
while(GET_BIT(UART_UCSRA,5)==0);	
UART_UDR = Data;
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8a b9       	out	0x0a, r24	; 10
  96:	83 e8       	ldi	r24, 0x83	; 131
  98:	80 bd       	out	0x20, r24	; 32
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	8a b1       	in	r24, 0x0a	; 10
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	89 b9       	out	0x09, r24	; 9
  aa:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000000d2 <_fini>:
  d2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000d4 <__funcs_on_exit>:
  d4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000d6 <__simulator_exit>:
  d6:	08 95       	ret

Disassembly of section .text.exit:

000000ac <exit>:
  ac:	ec 01       	movw	r28, r24
  ae:	0e 94 6a 00 	call	0xd4	; 0xd4 <__funcs_on_exit>
  b2:	0e 94 69 00 	call	0xd2	; 0xd2 <_fini>
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 6b 00 	call	0xd6	; 0xd6 <__simulator_exit>
  bc:	ce 01       	movw	r24, r28
  be:	0e 94 67 00 	call	0xce	; 0xce <_Exit>

Disassembly of section .text._Exit:

000000ce <_Exit>:
  ce:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
