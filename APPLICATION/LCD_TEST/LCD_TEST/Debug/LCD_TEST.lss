
LCD_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003ee  00000482  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000004bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016a2  00000000  00000000  0000055f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  00001c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f4  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000216  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d2  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000034dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003d0  000003d0  00000464  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000354c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_SETPINVALUE 000000f4  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_SEND_COMM 00000092  000001a4  000001a4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_SEND_DATA 00000092  00000236  00000236  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_INT 00000078  000002c8  000002c8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_SaveCustomChar 00000040  00000340  00000340  000003d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_DisplayCustomChar 00000006  000003ca  000003ca  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000034  00000380  00000380  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .data.smile   00000008  00800060  000003de  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data.heart   00000008  00800068  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .text.__dummy_fini 00000002  000003d8  000003d8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  000003da  000003da  0000046e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  000003dc  000003dc  00000470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  000003b4  000003b4  00000448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  000003d4  000003d4  00000468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
   8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
   c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  10:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  14:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  1c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  20:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  24:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  2c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  30:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  34:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  38:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  40:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  44:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  4c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>
  50:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 70       	andi	r16, 0x00	; 0
  58:	00 03       	mulsu	r16, r16
  5a:	de 00       	.word	0x00de	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  a8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

000003d0 <__bad_interrupt>:
 3d0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_SETPINVALUE:

000000b0 <DIO_SETPINVALUE>:

}

 void DIO_SETPINVALUE(u8 Port, u8 Pin ,u8 Value)
 {
	 switch (Port)
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	31 f1       	breq	.+76     	; 0x100 <DIO_SETPINVALUE+0x50>
  b4:	18 f4       	brcc	.+6      	; 0xbc <DIO_SETPINVALUE+0xc>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	39 f0       	breq	.+14     	; 0xc8 <DIO_SETPINVALUE+0x18>
  ba:	08 95       	ret
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	e1 f1       	breq	.+120    	; 0x138 <DIO_SETPINVALUE+0x88>
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	09 f4       	brne	.+2      	; 0xc6 <DIO_SETPINVALUE+0x16>
  c4:	54 c0       	rjmp	.+168    	; 0x16e <DIO_SETPINVALUE+0xbe>
  c6:	08 95       	ret
	 {
		 
		 case PORTA:
		 switch(Value){
  c8:	44 23       	and	r20, r20
  ca:	71 f0       	breq	.+28     	; 0xe8 <DIO_SETPINVALUE+0x38>
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_SETPINVALUE+0x22>
  d0:	68 c0       	rjmp	.+208    	; 0x1a2 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT : SET_BIT(PORTA_reg,Pin); break;
  d2:	2b b3       	in	r18, 0x1b	; 27
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SETPINVALUE+0x2e>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SETPINVALUE+0x2a>
  e2:	82 2b       	or	r24, r18
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTA_reg,Pin); break;
  e8:	2b b3       	in	r18, 0x1b	; 27
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SETPINVALUE+0x44>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SETPINVALUE+0x40>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	08 95       	ret
		 }
		 break;
		 case PORTB:
		 switch(Value){
 100:	44 23       	and	r20, r20
 102:	71 f0       	breq	.+28     	; 0x120 <DIO_SETPINVALUE+0x70>
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	09 f0       	breq	.+2      	; 0x10a <DIO_SETPINVALUE+0x5a>
 108:	4c c0       	rjmp	.+152    	; 0x1a2 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT : SET_BIT(PORTB_reg,Pin); break;
 10a:	28 b3       	in	r18, 0x18	; 24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SETPINVALUE+0x66>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SETPINVALUE+0x62>
 11a:	82 2b       	or	r24, r18
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTB_reg,Pin); break;
 120:	28 b3       	in	r18, 0x18	; 24
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SETPINVALUE+0x7c>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SETPINVALUE+0x78>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	88 bb       	out	0x18, r24	; 24
 136:	08 95       	ret
		 }
		 break;
		 case PORTC:
		 switch(Value){
 138:	44 23       	and	r20, r20
 13a:	69 f0       	breq	.+26     	; 0x156 <DIO_SETPINVALUE+0xa6>
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	89 f5       	brne	.+98     	; 0x1a2 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT :  SET_BIT(PORTC_reg,Pin); break;
 140:	25 b3       	in	r18, 0x15	; 21
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SETPINVALUE+0x9c>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SETPINVALUE+0x98>
 150:	82 2b       	or	r24, r18
 152:	85 bb       	out	0x15, r24	; 21
 154:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTC_reg,Pin); break;
 156:	25 b3       	in	r18, 0x15	; 21
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SETPINVALUE+0xb2>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SETPINVALUE+0xae>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	08 95       	ret
		 }
		 break;
		 case PORTD:
		 switch(Value){
 16e:	44 23       	and	r20, r20
 170:	69 f0       	breq	.+26     	; 0x18c <DIO_SETPINVALUE+0xdc>
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	b1 f4       	brne	.+44     	; 0x1a2 <DIO_SETPINVALUE+0xf2>
			 case DIO_OUTPUT :  SET_BIT(PORTD_reg,Pin); break;
 176:	22 b3       	in	r18, 0x12	; 18
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SETPINVALUE+0xd2>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SETPINVALUE+0xce>
 186:	82 2b       	or	r24, r18
 188:	82 bb       	out	0x12, r24	; 18
 18a:	08 95       	ret
			 case DIO_INPUT : CLEAR_BIT(PORTD_reg,Pin); break;
 18c:	22 b3       	in	r18, 0x12	; 18
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SETPINVALUE+0xe8>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SETPINVALUE+0xe4>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret

Disassembly of section .text.LCD_SEND_COMM:

000001a4 <LCD_SEND_COMM>:
#include <util/delay.h>
#include "DIO_PRIVATE.h"
#include "DIO_INTERFACE.h"

void LCD_SEND_COMM(u8 command)
{
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
	    PORTA_reg =  (PORTA_reg & 0x0f)| (command & 0xf0);
 1a8:	8b b3       	in	r24, 0x1b	; 27
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	9c 2f       	mov	r25, r28
 1ae:	90 7f       	andi	r25, 0xF0	; 240
 1b0:	89 2b       	or	r24, r25
 1b2:	8b bb       	out	0x1b, r24	; 27

    DIO_SETPINVALUE(PORTB, PIN_1, DIO_LOW);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
    DIO_SETPINVALUE(PORTB, PIN_2, DIO_LOW);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>


    DIO_SETPINVALUE(PORTB, PIN_3, DIO_HIGH);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	35 e0       	ldi	r19, 0x05	; 5
 1d4:	3a 95       	dec	r19
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_SEND_COMM+0x30>
 1d8:	00 00       	nop
    _delay_us(1);
    DIO_SETPINVALUE(PORTB, PIN_3, DIO_LOW);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	63 e0       	ldi	r22, 0x03	; 3
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>

    PORTA_reg =  (PORTA_reg & 0x0f)|(command << 4) ;
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	30 e1       	ldi	r19, 0x10	; 16
 1e8:	c3 9f       	mul	r28, r19
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	92 2f       	mov	r25, r18
 1f0:	9f 70       	andi	r25, 0x0F	; 15
 1f2:	89 2b       	or	r24, r25
 1f4:	8b bb       	out	0x1b, r24	; 27

    DIO_SETPINVALUE(PORTB, PIN_1, DIO_LOW);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
    DIO_SETPINVALUE(PORTB, PIN_2, DIO_LOW);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>


    DIO_SETPINVALUE(PORTB, PIN_3, DIO_HIGH);
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	63 e0       	ldi	r22, 0x03	; 3
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_SEND_COMM+0x72>
 21a:	00 00       	nop
    _delay_us(1);
    DIO_SETPINVALUE(PORTB, PIN_3, DIO_LOW);
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9f e1       	ldi	r25, 0x1F	; 31
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_SEND_COMM+0x86>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_SEND_COMM+0x8c>
 230:	00 00       	nop
		_delay_ms(2);

}
 232:	cf 91       	pop	r28
 234:	08 95       	ret

Disassembly of section .text.LCD_SEND_DATA:

00000236 <LCD_SEND_DATA>:

void LCD_SEND_DATA(u8 data)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
	  PORTA_reg =(PORTA_reg & 0x0f)| (data & 0xf0)  ;
 23a:	8b b3       	in	r24, 0x1b	; 27
 23c:	8f 70       	andi	r24, 0x0F	; 15
 23e:	9c 2f       	mov	r25, r28
 240:	90 7f       	andi	r25, 0xF0	; 240
 242:	89 2b       	or	r24, r25
 244:	8b bb       	out	0x1b, r24	; 27

    DIO_SETPINVALUE(PORTB, PIN_1, DIO_HIGH);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
    DIO_SETPINVALUE(PORTB, PIN_2, DIO_LOW);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>

  
    DIO_SETPINVALUE(PORTB, PIN_3, DIO_HIGH);
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	63 e0       	ldi	r22, 0x03	; 3
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	35 e0       	ldi	r19, 0x05	; 5
 266:	3a 95       	dec	r19
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_SEND_DATA+0x30>
 26a:	00 00       	nop
    _delay_us(1);
    DIO_SETPINVALUE(PORTB, PIN_3, DIO_LOW);
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PORTA_reg =  (PORTA_reg & 0x0f)|(data << 4) ;
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	30 e1       	ldi	r19, 0x10	; 16
 27a:	c3 9f       	mul	r28, r19
 27c:	c0 01       	movw	r24, r0
 27e:	11 24       	eor	r1, r1
 280:	92 2f       	mov	r25, r18
 282:	9f 70       	andi	r25, 0x0F	; 15
 284:	89 2b       	or	r24, r25
 286:	8b bb       	out	0x1b, r24	; 27
	DIO_SETPINVALUE(PORTB, PIN_2, DIO_LOW);
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
    DIO_SETPINVALUE(PORTB, PIN_1, DIO_HIGH);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>

  

    DIO_SETPINVALUE(PORTB, PIN_3, DIO_HIGH);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_SEND_DATA+0x72>
 2ac:	00 00       	nop
    _delay_us(1);
    DIO_SETPINVALUE(PORTB, PIN_3, DIO_LOW);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	8f e3       	ldi	r24, 0x3F	; 63
 2ba:	9f e1       	ldi	r25, 0x1F	; 31
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_SEND_DATA+0x86>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_SEND_DATA+0x8c>
 2c2:	00 00       	nop
	_delay_ms(2);
}
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

Disassembly of section .text.LCD_INT:

000002c8 <LCD_INT>:

void LCD_INT()
{
	DDRA_reg = 0xFF;  // Configure PORTA as output for data
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	8a bb       	out	0x1a, r24	; 26
	DDRB_reg |= 0x0f; // Configure lower 4 bits of PORTB as output for control
 2cc:	87 b3       	in	r24, 0x17	; 23
 2ce:	8f 60       	ori	r24, 0x0F	; 15
 2d0:	87 bb       	out	0x17, r24	; 23
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	83 ef       	ldi	r24, 0xF3	; 243
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <LCD_INT+0x10>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_INT+0x1a>
 2e2:	00 00       	nop

	_delay_ms(40);
	LCD_SEND_COMM(0x28);
 2e4:	88 e2       	ldi	r24, 0x28	; 40
 2e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	25 ed       	ldi	r18, 0xD5	; 213
 2ec:	2a 95       	dec	r18
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_INT+0x24>
 2f0:	00 00       	nop
	_delay_us(40);
	LCD_SEND_COMM(0x02);
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
 2f8:	8a e0       	ldi	r24, 0x0A	; 10
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_INT+0x32>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_INT+0x38>
	_delay_us(2);
	LCD_SEND_COMM(0x06);
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
 306:	95 ed       	ldi	r25, 0xD5	; 213
 308:	9a 95       	dec	r25
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_INT+0x40>
 30c:	00 00       	nop
	_delay_us(40);
	LCD_SEND_COMM(0x0F);
 30e:	8f e0       	ldi	r24, 0x0F	; 15
 310:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
	LCD_SEND_COMM(0x14);
 314:	84 e1       	ldi	r24, 0x14	; 20
 316:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	83 ef       	ldi	r24, 0xF3	; 243
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <LCD_INT+0x58>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_INT+0x62>
 32a:	00 00       	nop
	_delay_ms(40);
	LCD_SEND_COMM(0x01);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
 332:	8f e3       	ldi	r24, 0x3F	; 63
 334:	9f e1       	ldi	r25, 0x1F	; 31
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <LCD_INT+0x6e>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_INT+0x74>
 33c:	00 00       	nop
 33e:	08 95       	ret

Disassembly of section .text.LCD_SaveCustomChar:

00000340 <LCD_SaveCustomChar>:
	_delay_ms(2);
}


void LCD_SaveCustomChar(u8 location,u8 custom[])
{
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	
	if (location<8)
 348:	88 30       	cpi	r24, 0x08	; 8
 34a:	a8 f4       	brcc	.+42     	; 0x376 <LCD_SaveCustomChar+0x36>
 34c:	8b 01       	movw	r16, r22
	{
		LCD_SEND_COMM(0x40 +(location*8));
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 96       	adiw	r24, 0x08	; 8
 352:	88 0f       	add	r24, r24
 354:	88 0f       	add	r24, r24
 356:	88 0f       	add	r24, r24
 358:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
		for (int i = 0; i < 8; i++)
 35c:	c0 e0       	ldi	r28, 0x00	; 0
 35e:	d0 e0       	ldi	r29, 0x00	; 0
 360:	07 c0       	rjmp	.+14     	; 0x370 <LCD_SaveCustomChar+0x30>
		{
			LCD_SEND_DATA(custom[i]);
 362:	f8 01       	movw	r30, r16
 364:	ec 0f       	add	r30, r28
 366:	fd 1f       	adc	r31, r29
 368:	80 81       	ld	r24, Z
 36a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_SEND_DATA>
{
	
	if (location<8)
	{
		LCD_SEND_COMM(0x40 +(location*8));
		for (int i = 0; i < 8; i++)
 36e:	21 96       	adiw	r28, 0x01	; 1
 370:	c8 30       	cpi	r28, 0x08	; 8
 372:	d1 05       	cpc	r29, r1
 374:	b4 f3       	brlt	.-20     	; 0x362 <LCD_SaveCustomChar+0x22>
		{
			LCD_SEND_DATA(custom[i]);
		}
	}
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

Disassembly of section .text.LCD_DisplayCustomChar:

000003ca <LCD_DisplayCustomChar>:

void LCD_DisplayCustomChar(u8 location)
{
	
	LCD_SEND_DATA(location);
 3ca:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_SEND_DATA>
 3ce:	08 95       	ret

Disassembly of section .text.main:

00000380 <main>:
  0x00
};

int main(void)
{
	LCD_INT();
 380:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_INT>
LCD_SaveCustomChar(0,smile);
 384:	60 e6       	ldi	r22, 0x60	; 96
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_SaveCustomChar>
 LCD_SaveCustomChar(1,heart);
 390:	68 e6       	ldi	r22, 0x68	; 104
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_SaveCustomChar>
  
 LCD_SEND_COMM(0x80);
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_SEND_COMM>
  LCD_DisplayCustomChar(0);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_DisplayCustomChar>
  LCD_DisplayCustomChar(1);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_DisplayCustomChar>
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <main+0x32>

Disassembly of section .text.__dummy_fini:

000003d8 <_fini>:
 3d8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003da <__funcs_on_exit>:
 3da:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003dc <__simulator_exit>:
 3dc:	08 95       	ret

Disassembly of section .text.exit:

000003b4 <exit>:
 3b4:	ec 01       	movw	r28, r24
 3b6:	0e 94 ed 01 	call	0x3da	; 0x3da <__funcs_on_exit>
 3ba:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_fini>
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__simulator_exit>
 3c4:	ce 01       	movw	r24, r28
 3c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_Exit>

Disassembly of section .text._Exit:

000003d4 <_Exit>:
 3d4:	0e 94 56 00 	call	0xac	; 0xac <_exit>
