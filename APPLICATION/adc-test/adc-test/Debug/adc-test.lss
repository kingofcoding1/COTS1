
adc-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000019d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a60  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a8  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000055  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000167d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ADC_INIT 00000028  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_READ 0000001c  000000ba  000000ba  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000026  00000094  00000094  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000f8  000000f8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ADC_INIT:

0000006c <ADC_INIT>:
#include "DIO_PRIVATE.h"

void ADC_INIT(u8 channel)
{
	
SET_BIT(ADMUX,6);
  6c:	97 b1       	in	r25, 0x07	; 7
  6e:	90 64       	ori	r25, 0x40	; 64
  70:	97 b9       	out	0x07, r25	; 7
GET_BIT(ADMUX,7);	
  72:	97 b1       	in	r25, 0x07	; 7
	
ADMUX |= channel;	
  74:	97 b1       	in	r25, 0x07	; 7
  76:	89 2b       	or	r24, r25
  78:	87 b9       	out	0x07, r24	; 7
	
SET_BIT(ADCSRA,2);	
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	86 b9       	out	0x06, r24	; 6
SET_BIT(ADCSRA,1);
  80:	86 b1       	in	r24, 0x06	; 6
  82:	82 60       	ori	r24, 0x02	; 2
  84:	86 b9       	out	0x06, r24	; 6
SET_BIT(ADCSRA,0);
  86:	86 b1       	in	r24, 0x06	; 6
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	86 b9       	out	0x06, r24	; 6
	
SET_BIT(ADCSRA,7);
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	86 b9       	out	0x06, r24	; 6
  92:	08 95       	ret

Disassembly of section .text.ADC_READ:

000000ba <ADC_READ>:
}

u16 ADC_READ()
{
	SET_BIT(ADCSRA,6);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA,4) != 1)
  c0:	34 99       	sbic	0x06, 4	; 6
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <ADC_READ+0x1a>
	return ADCL+(ADCH<<8);
  c4:	24 b1       	in	r18, 0x04	; 4
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	98 2f       	mov	r25, r24
  cc:	88 27       	eor	r24, r24
  ce:	82 0f       	add	r24, r18
  d0:	91 1d       	adc	r25, r1
  d2:	08 95       	ret
	
  d4:	08 95       	ret

Disassembly of section .text.main:

00000094 <main>:
#include "ADC_INTER.h"
#include "DIO_PRIVATE.h"

int main()
{
	SET_BIT(DDRD_reg,3);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	88 60       	ori	r24, 0x08	; 8
  98:	81 bb       	out	0x11, r24	; 17
	u16 data = 0 ;
	ADC_INIT(1);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
	while(1){
		data  = ADC_READ() ; 
  a0:	0e 94 5d 00 	call	0xba	; 0xba <ADC_READ>
		if(data > 100)
  a4:	85 36       	cpi	r24, 0x65	; 101
  a6:	91 05       	cpc	r25, r1
  a8:	20 f0       	brcs	.+8      	; 0xb2 <main+0x1e>
		{
			SET_BIT(PORTD_reg,3);
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	f7 cf       	rjmp	.-18     	; 0xa0 <main+0xc>
		}
		else{
			CLEAR_BIT(PORTD_reg,3);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	f3 cf       	rjmp	.-26     	; 0xa0 <main+0xc>

Disassembly of section .text.__dummy_fini:

000000f4 <_fini>:
  f4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000f6 <__funcs_on_exit>:
  f6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000f8 <__simulator_exit>:
  f8:	08 95       	ret

Disassembly of section .text.exit:

000000d6 <exit>:
  d6:	ec 01       	movw	r28, r24
  d8:	0e 94 7b 00 	call	0xf6	; 0xf6 <__funcs_on_exit>
  dc:	0e 94 7a 00 	call	0xf4	; 0xf4 <_fini>
  e0:	ce 01       	movw	r24, r28
  e2:	0e 94 7c 00 	call	0xf8	; 0xf8 <__simulator_exit>
  e6:	ce 01       	movw	r24, r28
  e8:	0e 94 78 00 	call	0xf0	; 0xf0 <_Exit>

Disassembly of section .text._Exit:

000000f0 <_Exit>:
  f0:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
